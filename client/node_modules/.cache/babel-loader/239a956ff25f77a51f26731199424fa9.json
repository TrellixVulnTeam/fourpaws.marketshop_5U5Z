{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/macbook/Desktop/ReactJs/dogcat/src/Components/GoogleMaps/GMap.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { GoogleMap, useJsApiLoader } from '@react-google-maps/api';\nconst containerStyle = {\n  width: '1400px',\n  height: '695px'\n};\nconst center = {\n  lat: '55.8542404',\n  lng: '37.4766922'\n};\n\nfunction MyComponent() {\n  _s();\n\n  const {\n    isLoaded\n  } = useJsApiLoader({\n    id: 'google-map-script',\n    googleMapsApiKey: \"AIzaSyCjaDlH7gvcEjGeBmoeNQXDAVVKadCJOu4\"\n  });\n  const [map, setMap] = React.useState(null);\n  const onLoad = React.useCallback(function callback(map) {\n    const bounds = new window.google.maps.LatLngBounds();\n    map.fitBounds(bounds);\n    setMap(map);\n  }, []);\n  const onUnmount = React.useCallback(function callback(map) {\n    setMap(null);\n  }, []);\n  return isLoaded ? /*#__PURE__*/_jsxDEV(GoogleMap, {\n    mapContainerStyle: containerStyle,\n    center: center,\n    zoom: 10,\n    onLoad: onLoad,\n    onUnmount: onUnmount,\n    children: /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n}\n\n_s(MyComponent, \"sc/DS85Udqb0HC94DVNruSImuio=\", false, function () {\n  return [useJsApiLoader];\n});\n\n_c = MyComponent;\nexport default _c2 = /*#__PURE__*/React.memo(MyComponent);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MyComponent\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/macbook/Desktop/ReactJs/dogcat/src/Components/GoogleMaps/GMap.js"],"names":["React","GoogleMap","useJsApiLoader","containerStyle","width","height","center","lat","lng","MyComponent","isLoaded","id","googleMapsApiKey","map","setMap","useState","onLoad","useCallback","callback","bounds","window","google","maps","LatLngBounds","fitBounds","onUnmount","memo"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,cAApB,QAA0C,wBAA1C;AAEA,MAAMC,cAAc,GAAG;AACnBC,EAAAA,KAAK,EAAE,QADY;AAEnBC,EAAAA,MAAM,EAAE;AAFW,CAAvB;AAKA,MAAMC,MAAM,GAAG;AACXC,EAAAA,GAAG,EAAE,YADM;AAEXC,EAAAA,GAAG,EAAE;AAFM,CAAf;;AAKA,SAASC,WAAT,GAAuB;AAAA;;AACnB,QAAM;AAAEC,IAAAA;AAAF,MAAeR,cAAc,CAAC;AAChCS,IAAAA,EAAE,EAAE,mBAD4B;AAEhCC,IAAAA,gBAAgB,EAAE;AAFc,GAAD,CAAnC;AAKA,QAAM,CAACC,GAAD,EAAMC,MAAN,IAAgBd,KAAK,CAACe,QAAN,CAAe,IAAf,CAAtB;AAEA,QAAMC,MAAM,GAAGhB,KAAK,CAACiB,WAAN,CAAkB,SAASC,QAAT,CAAkBL,GAAlB,EAAuB;AACpD,UAAMM,MAAM,GAAG,IAAIC,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmBC,YAAvB,EAAf;AACAV,IAAAA,GAAG,CAACW,SAAJ,CAAcL,MAAd;AACAL,IAAAA,MAAM,CAACD,GAAD,CAAN;AACH,GAJc,EAIZ,EAJY,CAAf;AAMA,QAAMY,SAAS,GAAGzB,KAAK,CAACiB,WAAN,CAAkB,SAASC,QAAT,CAAkBL,GAAlB,EAAuB;AACvDC,IAAAA,MAAM,CAAC,IAAD,CAAN;AACH,GAFiB,EAEf,EAFe,CAAlB;AAIA,SAAOJ,QAAQ,gBACX,QAAC,SAAD;AACI,IAAA,iBAAiB,EAAEP,cADvB;AAEI,IAAA,MAAM,EAAEG,MAFZ;AAGI,IAAA,IAAI,EAAE,EAHV;AAII,IAAA,MAAM,EAAEU,MAJZ;AAKI,IAAA,SAAS,EAAES,SALf;AAAA,2BAQI;AARJ;AAAA;AAAA;AAAA;AAAA,UADW,gBAWX,qCAXJ;AAYH;;GA9BQhB,W;UACgBP,c;;;KADhBO,W;AAgCT,kCAAeT,KAAK,CAAC0B,IAAN,CAAWjB,WAAX,CAAf","sourcesContent":["import React from 'react'\nimport { GoogleMap, useJsApiLoader } from '@react-google-maps/api';\n\nconst containerStyle = {\n    width: '1400px',\n    height: '695px'\n};\n\nconst center = {\n    lat: '55.8542404',\n    lng: '37.4766922'\n};\n\nfunction MyComponent() {\n    const { isLoaded } = useJsApiLoader({\n        id: 'google-map-script',\n        googleMapsApiKey: \"AIzaSyCjaDlH7gvcEjGeBmoeNQXDAVVKadCJOu4\"\n    })\n\n    const [map, setMap] = React.useState(null)\n\n    const onLoad = React.useCallback(function callback(map) {\n        const bounds = new window.google.maps.LatLngBounds();\n        map.fitBounds(bounds);\n        setMap(map)\n    }, [])\n\n    const onUnmount = React.useCallback(function callback(map) {\n        setMap(null)\n    }, [])\n\n    return isLoaded ? (\n        <GoogleMap\n            mapContainerStyle={containerStyle}\n            center={center}\n            zoom={10}\n            onLoad={onLoad}\n            onUnmount={onUnmount}\n        >\n            { /* Child components, such as markers, info windows, etc. */ }\n            <></>\n        </GoogleMap>\n    ) : <></>\n}\n\nexport default React.memo(MyComponent)"]},"metadata":{},"sourceType":"module"}